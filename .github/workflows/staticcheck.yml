name: Multi-Language Static Check

on:
  workflow_dispatch:
    inputs:
      target_repository:
        description: 'Target repository (e.g., owner/repo-name)'
        required: true
        type: string
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  static-analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Checkout target repo if manual trigger
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.target_repository }}
          token: ${{ secrets.IOS_TOKEN }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy cppcheck python3-pip openjdk-17-jdk curl unzip python3-setuptools
          python3 -m pip install --upgrade pip
          pip3 install flake8 pylint

      - name: Install Checkstyle (Java)
        run: |
          curl -LJO https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.12.4/checkstyle-10.12.4-all.jar

      - name: Set up Go (for checkmake)
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install checkmake
        run: |
          go install github.com/mrtazz/checkmake/cmd/checkmake@latest
          echo "${HOME}/go/bin" >> $GITHUB_PATH

      - name: Create report folder
        run: mkdir -p reports

      - name: C/C++ Analysis (clang-tidy + cppcheck)
        run: |
          find . -name '*.c' -o -name '*.cpp' > cfiles.txt
          if [ -s cfiles.txt ]; then
            cppcheck . 2> reports/cppcheck.txt || true
            clang-tidy $(cat cfiles.txt) -- 2> reports/clang-tidy.txt || true
          else
            echo "No C/C++ files found." > reports/clang-tidy.txt
            echo "No C/C++ files found." > reports/cppcheck.txt
          fi

      - name: Python Analysis (flake8 + pylint)
        run: |
          pyfiles=$(find . -name "*.py")
          if [ -n "$pyfiles" ]; then
            flake8 . > reports/flake8.txt || true
            pylint $pyfiles > reports/pylint.txt || true
          else
            echo "No Python files found." > reports/flake8.txt
            echo "No Python files found." > reports/pylint.txt
          fi

      - name: Java Analysis (Checkstyle)
        run: |
          find . -name "*.java" > java-files.txt
          if [ -s java-files.txt ]; then
            java -jar checkstyle-10.12.4-all.jar -c /google_checks.xml -f plain -o reports/checkstyle.txt @java-files.txt || true
          else
            echo "No Java files found." > reports/checkstyle.txt
          fi

      - name: Makefile Analysis (checkmake)
        run: |
          makefiles=$(find . -name 'Makefile')
          if [ -n "$makefiles" ]; then
            echo "$makefiles" | xargs -n1 checkmake > reports/checkmake.txt || true
          else
            echo "No Makefiles found." > reports/checkmake.txt
          fi

      - name: Mustache Analysis
        run: |
          count=$(find . -name '*.mustache' | wc -l)
          if [ "$count" -eq 0 ]; then
            echo "No Mustache files found." > reports/mustache.txt
          else
            echo "Found $count Mustache files. No formal linter used. Files are readable." > reports/mustache.txt
            find . -name '*.mustache' -exec cat {} \; > /dev/null || echo "One or more files unreadable." >> reports/mustache.txt
          fi

      - name: Generate Structured HTML Report
        run: |
          echo '<html><head><style>
          body { font-family: Arial; }
          h1 { color: #333; }
          table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
          th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
          th { background-color: #f2f2f2; }
          pre { white-space: pre-wrap; }
          </style></head><body>' > reports/staticcheck.html

          echo '<h1>Static Analysis Report</h1>' >> reports/staticcheck.html

          for file in reports/*.txt; do
            name=$(basename "$file")
            echo "<h2>$name</h2><table><tr><th>Line</th><th>Message</th></tr>" >> reports/staticcheck.html
            lineno=0
            while IFS= read -r line; do
              lineno=$((lineno+1))
              safe=$(echo "$line" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g')
              echo "<tr><td>$lineno</td><td><pre>$safe</pre></td></tr>" >> reports/staticcheck.html
            done < "$file"
            echo "</table>" >> reports/staticcheck.html
          done

          echo "</body></html>" >> reports/staticcheck.html

      - name: Upload Report Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: staticcheck-reports
          path: reports/
          retention-days: 14
